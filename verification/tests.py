import os
import pytest
from verification.services.classifier import guess_document_type
from verification.services.ner import extract_entities
from verification.services.ocr import extract_text_from_file


# ------------------------
# üîç –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
# ------------------------
def test_classifier_identity():
    text = "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
    assert guess_document_type(text) == "identity"


def test_classifier_income():
    text = "–°–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Ö–æ–¥–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞ 2023 –≥–æ–¥"
    assert guess_document_type(text) == "income"


def test_classifier_supporting():
    text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ª–µ—á–µ–Ω–∏–µ"
    assert guess_document_type(text) == "supporting"


# ------------------------
# üîç NER (Natasha)
# ------------------------
def test_ner_entity_extraction():
    text = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω —Ä–æ–¥–∏–ª—Å—è –≤ –ê–ª–º–∞—Ç—ã –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Kaspi"
    entities = extract_entities(text)
    types = [e['type'] for e in entities]

    assert 'PER' in types or 'LOC' in types or 'ORG' in types


# ------------------------
# üîç OCR (–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
# ------------------------
def test_ocr_on_sample_image():
    sample_path = os.path.join(os.path.dirname(__file__), 'sample_id.jpg')

    if not os.path.exists(sample_path):
        pytest.skip("Sample image not found")

    text = extract_text_from_file(sample_path)
    assert len(text.strip()) > 30  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
